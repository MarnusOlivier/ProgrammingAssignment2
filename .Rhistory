cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x > 5){
x <- 0
}
x
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3){
NA
}
else{
10
}
y
x <- 5
y <- if(x < 3){
NA
}
else{
10
}
x <- 5
y <- if(x < 3){
NA
} else{
10
}
x
x <- 5
y <- if(x < 3){
NA
} else{
10
}
y
clear
clear()
getwd()
?lapply
str(lapply)
str(matrix)
x <- matrix(data = rnorm(20, 1)), nrow = 4, ncol = 5)
x <- matrix(data = rnorm(20, 1), nrow = 4, ncol = 5)
x
lapply(X,mean)
lapply(x,mean)
x <- list(data = rnorm(20, 1), nrow = 4, ncol = 5)
x
lapply(x,mean)
sapply(x,mean)
?lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x,mean)
sapply(x,mean)
str(matrix)
> f1 <- gl(2, 5)
f1 <- gl(2, 5)
f1
f2 <- gl(3, 5)
f2
f2 <- gl(5, 2)
f2
interaction(f1, f2)
f<- interaction(f1, f2)
f
list()
ls()
x
mean(X)
traceback()
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
library(datasets)
data(iris)
?iris
iris
class(iris)
iris$Sepal.Length
mask <- iris$Species == 'virginica'
mask
iris$Sepal.Length[mask]
mean(iris$Sepal.Length[mask])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
colMeans(iris)
data(mtcars)
mtcars
library(data)
library(datasets)
data(mtcars)
head(mtcars)
mtcars
mtcars[1]
mean(mtcars[1])
mean(mtcars[[1]])
mtcars
mtcars$hp
mtcars$hp[mtcars$cyl == 4]
mean(mtcars$hp[mtcars$cyl == 4]) - mean(mtcars$hp[mtcars$cyl == 8])
getwd()
setwd("C:/Users/212410226/Python & R/R_workingDirectory/1. Programming in R/Week3/Assignment/ProgrammingAssignment2")
source("cachematrix")
source("cachematrix.R")
X <- matrix(rnorm(1000000), nrow = 1000, ncol = 1000)
solve(X)
CacheMatrix <- makeCacheMatrix(X)
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
CacheMatrix <- makeCacheMatrix(X)
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
source('C:/Users/212410226/Python & R/R_workingDirectory/1. Programming in R/Week3/Assignment/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/212410226/Python & R/R_workingDirectory/1. Programming in R/Week3/Assignment/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/212410226/Python & R/R_workingDirectory/1. Programming in R/Week3/Assignment/ProgrammingAssignment2/cachematrix.R')
X <- makeCacheMatrix(matrix(rnorm(1000000), nrow = 1000, ncol = 1000))
X$get()
X$get_inverse()
cacheSolve(X)
X$get_inverse()
cacheSolve(X)
source('C:/Users/212410226/Python & R/R_workingDirectory/1. Programming in R/Week3/Assignment/ProgrammingAssignment2/cachematrix.R')
